Contract DIDRegistrar(
  didRecordContractId: ByteVec
) extends Constants() {

  fn getDIDRecordContractId(identity: Address, caller: Address) -> ByteVec {
    let node = blake2b!(toByteVec!(identity))
    let didRecordId = subContractId!(node)
    if (!contractExists!(didRecordId)) {
        let (didRecordImmFields, didRecordMutFields) = DIDRecord.encodeFields!(identity, identity, 0)
        copyCreateSubContract!{caller -> ALPH: 1 alph}(
          node,
          didRecordContractId,
          didRecordImmFields,
          didRecordMutFields
        )
    }
    else {
      let didRecord = DIDRecord(didRecordId)
      checkCaller!(caller == didRecord.getOwner(), ErrorCodes.InvalidCaller)
    }

    return didRecordId
  }

  @using(checkExternalCaller = false)
  pub fn setAttribute(identity: Address, name: U256, value: ByteVec, validity:U256) -> () {
    let didRecordId = getDIDRecordContractId(identity, callerAddress!())
    let didRecord = DIDRecord(didRecordId)
    didRecord.setAttribute(callerAddress!(), name, value, validity)
  }

    @using(checkExternalCaller = false)
    pub fn revokeAttribute(identity: Address, name: U256, value: ByteVec) -> () {
      let didRecordId = getDIDRecordContractId(identity, callerAddress!())
      let didRecord = DIDRecord(didRecordId)
      didRecord.revokeAttribute(callerAddress!(), name, value)
    }

}