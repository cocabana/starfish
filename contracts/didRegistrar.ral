Contract DIDRegistrar(
  didRecordContractId: ByteVec
) extends Constants() {

  event DIDRegistered(
    parentContractId: ByteVec, subContractPath: ByteVec, identity: Address
  )

  @using(preapprovedAssets = true)
  pub fn register(identity: Address) -> () {
      checkCaller!(callerAddress!() == identity, ErrorCodes.InvalidCaller)
      let node = toByteVec!(identity)
      let (immFields, mutFields) = DIDRecord.encodeFields!(identity, identity, 0)
      copyCreateSubContract!{callerAddress!() -> ALPH: 1 alph}(
        node,
        didRecordContractId,
        immFields,
        mutFields
      )
      emit DIDRegistered(selfContractId!(), node, identity)
  }

}