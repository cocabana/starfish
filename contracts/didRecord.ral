Contract DIDRecord(
    identity: Address,
    mut owner: Address,
    mut changed: U256
) extends Constants() {

    event DIDOwnerChanged(identity: Address, owner: Address)
    event DIDAttributeChanged(identity: Address, name: U256, value: ByteVec, validTo: U256)

    pub fn getOwner() -> Address {
        return owner
    }

    @using(updateFields = true)
    pub fn changeOwner(newOwner: Address) -> () {
        checkCaller!(callerAddress!() == owner, ErrorCodes.InvalidCaller)
        owner = newOwner
        emit DIDOwnerChanged(identity, newOwner)
        changed = changed + 1
    }

    @using(updateFields = true)
    pub fn setAttribute(name: U256, value: ByteVec, validity: U256) -> () {
      checkCaller!(callerAddress!() == owner, ErrorCodes.InvalidCaller)
      emit DIDAttributeChanged(identity, name, value, blockTimeStamp!() + validity)
      changed = changed + 1
    }

    @using(updateFields = true)
    pub fn revokeAttribute(name: U256, value: ByteVec) -> () {
        checkCaller!(callerAddress!() == owner, ErrorCodes.InvalidCaller)
        emit DIDAttributeChanged(identity, name, value, 0)
        changed = changed + 1
    }

}