/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as DIDRegistrarContractJson } from "../DIDRegistrar.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace DIDRegistrarTypes {
  export type Fields = {
    didRecordContractId: HexString;
  };

  export type State = ContractState<Fields>;

  export type DIDRegisteredEvent = ContractEvent<{
    parentContractId: HexString;
    subContractPath: HexString;
    identity: Address;
  }>;
}

class Factory extends ContractFactory<
  DIDRegistrarInstance,
  DIDRegistrarTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as DIDRegistrarTypes.Fields;
  }

  eventIndex = { DIDRegistered: 0 };
  consts = { ErrorCodes: { InvalidCaller: BigInt(0) } };

  at(address: string): DIDRegistrarInstance {
    return new DIDRegistrarInstance(address);
  }

  tests = {
    register: async (
      params: TestContractParams<
        DIDRegistrarTypes.Fields,
        { identity: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "register", params);
    },
  };
}

// Use this object to test and deploy the contract
export const DIDRegistrar = new Factory(
  Contract.fromJson(
    DIDRegistrarContractJson,
    "",
    "8f0d8f36bad699312622c50196b1611fe23c792413d88598fa149352493273da"
  )
);

// Use this class to interact with the blockchain
export class DIDRegistrarInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<DIDRegistrarTypes.State> {
    return fetchContractState(DIDRegistrar, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeDIDRegisteredEvent(
    options: EventSubscribeOptions<DIDRegistrarTypes.DIDRegisteredEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      DIDRegistrar.contract,
      this,
      options,
      "DIDRegistered",
      fromCount
    );
  }
}
