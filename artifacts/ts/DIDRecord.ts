/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as DIDRecordContractJson } from "../DIDRecord.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace DIDRecordTypes {
  export type Fields = {
    identity: Address;
    owner: Address;
    changed: bigint;
  };

  export type State = ContractState<Fields>;

  export type DIDOwnerChangedEvent = ContractEvent<{
    identity: Address;
    owner: Address;
    previousChange: bigint;
  }>;
  export type DIDAttributeChangedEvent = ContractEvent<{
    identity: Address;
    name: bigint;
    value: HexString;
    validTo: bigint;
    previousChange: bigint;
  }>;

  export interface CallMethodTable {
    getOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  DIDRecordInstance,
  DIDRecordTypes.Fields
> {
  consts = { ErrorCodes: { InvalidCaller: BigInt(0) } };

  at(address: string): DIDRecordInstance {
    return new DIDRecordInstance(address);
  }

  tests = {
    getOwner: async (
      params: Omit<TestContractParams<DIDRecordTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getOwner", params);
    },
    setOwner: async (
      params: TestContractParams<DIDRecordTypes.Fields, { newOwner: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setOwner", params);
    },
    setAttribute: async (
      params: TestContractParams<
        DIDRecordTypes.Fields,
        { actor: Address; name: bigint; value: HexString; validity: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setAttribute", params);
    },
    revokeAttribute: async (
      params: TestContractParams<
        DIDRecordTypes.Fields,
        { actor: Address; name: bigint; value: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "revokeAttribute", params);
    },
  };
}

// Use this object to test and deploy the contract
export const DIDRecord = new Factory(
  Contract.fromJson(
    DIDRecordContractJson,
    "",
    "e8a430a6dac34b3be9acf254f3ce4359e85b7f1f94e0afd984272151d6af1591"
  )
);

// Use this class to interact with the blockchain
export class DIDRecordInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<DIDRecordTypes.State> {
    return fetchContractState(DIDRecord, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeDIDOwnerChangedEvent(
    options: SubscribeOptions<DIDRecordTypes.DIDOwnerChangedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      DIDRecord.contract,
      this,
      options,
      "DIDOwnerChanged",
      fromCount
    );
  }

  subscribeDIDAttributeChangedEvent(
    options: SubscribeOptions<DIDRecordTypes.DIDAttributeChangedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      DIDRecord.contract,
      this,
      options,
      "DIDAttributeChanged",
      fromCount
    );
  }

  subscribeAllEvents(
    options: SubscribeOptions<
      | DIDRecordTypes.DIDOwnerChangedEvent
      | DIDRecordTypes.DIDAttributeChangedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      DIDRecord.contract,
      this,
      options,
      fromCount
    );
  }

  methods = {
    getOwner: async (
      params?: DIDRecordTypes.CallMethodParams<"getOwner">
    ): Promise<DIDRecordTypes.CallMethodResult<"getOwner">> => {
      return callMethod(
        DIDRecord,
        this,
        "getOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends DIDRecordTypes.MultiCallParams>(
    calls: Calls
  ): Promise<DIDRecordTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      DIDRecord,
      this,
      calls,
      getContractByCodeHash
    )) as DIDRecordTypes.MultiCallResults<Calls>;
  }
}
