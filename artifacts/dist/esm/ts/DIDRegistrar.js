/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, subscribeContractEvent, testMethod, fetchContractState, ContractInstance, getContractEventsCurrentCount, } from "@alephium/web3";
import { default as DIDRegistrarContractJson } from "../DIDRegistrar.ral.json";
class Factory extends ContractFactory {
    getInitialFieldsWithDefaultValues() {
        return this.contract.getInitialFieldsWithDefaultValues();
    }
    eventIndex = { DIDRegistered: 0 };
    consts = { ErrorCodes: { InvalidCaller: BigInt(0) } };
    at(address) {
        return new DIDRegistrarInstance(address);
    }
    tests = {
        getDIDRecordContractId: async (params) => {
            return testMethod(this, "getDIDRecordContractId", params);
        },
        addressToByteVec: async (params) => {
            return testMethod(this, "addressToByteVec", params);
        },
        register: async (params) => {
            return testMethod(this, "register", params);
        },
        setAttribute: async (params) => {
            return testMethod(this, "setAttribute", params);
        },
        revokeAttribute: async (params) => {
            return testMethod(this, "revokeAttribute", params);
        },
    };
}
// Use this object to test and deploy the contract
export const DIDRegistrar = new Factory(Contract.fromJson(DIDRegistrarContractJson, "", "121b19a2b6ed634c07030dbcd011515f10ac7b6c349248a713b330572e775428"));
// Use this class to interact with the blockchain
export class DIDRegistrarInstance extends ContractInstance {
    constructor(address) {
        super(address);
    }
    async fetchState() {
        return fetchContractState(DIDRegistrar, this);
    }
    async getContractEventsCurrentCount() {
        return getContractEventsCurrentCount(this.address);
    }
    subscribeDIDRegisteredEvent(options, fromCount) {
        return subscribeContractEvent(DIDRegistrar.contract, this, options, "DIDRegistered", fromCount);
    }
}
//# sourceMappingURL=DIDRegistrar.js.map