/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, subscribeContractEvent, subscribeContractEvents, testMethod, callMethod, multicallMethods, fetchContractState, ContractInstance, getContractEventsCurrentCount, } from "@alephium/web3";
import { default as DIDRecordContractJson } from "../DIDRecord.ral.json";
import { getContractByCodeHash } from "./contracts";
class Factory extends ContractFactory {
    getInitialFieldsWithDefaultValues() {
        return this.contract.getInitialFieldsWithDefaultValues();
    }
    eventIndex = { DIDOwnerChanged: 0, DIDAttributeChanged: 1 };
    consts = { ErrorCodes: { InvalidCaller: BigInt(0) } };
    at(address) {
        return new DIDRecordInstance(address);
    }
    tests = {
        getOwner: async (params) => {
            return testMethod(this, "getOwner", params);
        },
        setOwner: async (params) => {
            return testMethod(this, "setOwner", params);
        },
        setAttribute: async (params) => {
            return testMethod(this, "setAttribute", params);
        },
        revokeAttribute: async (params) => {
            return testMethod(this, "revokeAttribute", params);
        },
    };
}
// Use this object to test and deploy the contract
export const DIDRecord = new Factory(Contract.fromJson(DIDRecordContractJson, "", "4661e0f51d42cb8b1fe54c0190d02eea19ce94505abf101d105823c780b38235"));
// Use this class to interact with the blockchain
export class DIDRecordInstance extends ContractInstance {
    constructor(address) {
        super(address);
    }
    async fetchState() {
        return fetchContractState(DIDRecord, this);
    }
    async getContractEventsCurrentCount() {
        return getContractEventsCurrentCount(this.address);
    }
    subscribeDIDOwnerChangedEvent(options, fromCount) {
        return subscribeContractEvent(DIDRecord.contract, this, options, "DIDOwnerChanged", fromCount);
    }
    subscribeDIDAttributeChangedEvent(options, fromCount) {
        return subscribeContractEvent(DIDRecord.contract, this, options, "DIDAttributeChanged", fromCount);
    }
    subscribeAllEvents(options, fromCount) {
        return subscribeContractEvents(DIDRecord.contract, this, options, fromCount);
    }
    methods = {
        getOwner: async (params) => {
            return callMethod(DIDRecord, this, "getOwner", params === undefined ? {} : params, getContractByCodeHash);
        },
    };
    async multicall(calls) {
        return (await multicallMethods(DIDRecord, this, calls, getContractByCodeHash));
    }
}
//# sourceMappingURL=DIDRecord.js.map