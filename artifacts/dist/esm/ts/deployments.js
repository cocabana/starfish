/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { DIDRecord, DIDRegistrar, } from ".";
import { default as mainnetDeployments } from "../.deployments.mainnet.json";
import { default as devnetDeployments } from "../.deployments.devnet.json";
function toDeployments(json) {
    const contracts = {
        DIDRecord: {
            ...json.contracts["DIDRecord"],
            contractInstance: DIDRecord.at(json.contracts["DIDRecord"].contractInstance.address),
        },
        DIDRegistrar: {
            ...json.contracts["DIDRegistrar"],
            contractInstance: DIDRegistrar.at(json.contracts["DIDRegistrar"].contractInstance.address),
        },
    };
    return {
        ...json,
        contracts: contracts,
    };
}
export function loadDeployments(networkId, deployerAddress) {
    const deployments = networkId === "mainnet"
        ? mainnetDeployments
        : networkId === "devnet"
            ? devnetDeployments
            : undefined;
    if (deployments === undefined) {
        throw Error("The contract has not been deployed to the " + networkId);
    }
    const allDeployments = Array.isArray(deployments)
        ? deployments
        : [deployments];
    if (deployerAddress === undefined) {
        if (allDeployments.length > 1) {
            throw Error("The contract has been deployed multiple times on " +
                networkId +
                ", please specify the deployer address");
        }
        else {
            return toDeployments(allDeployments[0]);
        }
    }
    const result = allDeployments.find((d) => d.deployerAddress === deployerAddress);
    if (result === undefined) {
        throw Error("The contract deployment result does not exist");
    }
    return toDeployments(result);
}
//# sourceMappingURL=deployments.js.map